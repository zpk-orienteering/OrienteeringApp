#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.18051
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database.sdf")]
	internal partial class DatabaseContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContest(Contest instance);
    partial void UpdateContest(Contest instance);
    partial void DeleteContest(Contest instance);
    partial void InsertControlPoint(ControlPoint instance);
    partial void UpdateControlPoint(ControlPoint instance);
    partial void DeleteControlPoint(ControlPoint instance);
    partial void InsertMMControlPointContest(MMControlPointContest instance);
    partial void UpdateMMControlPointContest(MMControlPointContest instance);
    partial void DeleteMMControlPointContest(MMControlPointContest instance);
    partial void InsertMMControlPointRoute(MMControlPointRoute instance);
    partial void UpdateMMControlPointRoute(MMControlPointRoute instance);
    partial void DeleteMMControlPointRoute(MMControlPointRoute instance);
    partial void InsertMMUserContest(MMUserContest instance);
    partial void UpdateMMUserContest(MMUserContest instance);
    partial void DeleteMMUserContest(MMUserContest instance);
    partial void InsertMMUserList(MMUserList instance);
    partial void UpdateMMUserList(MMUserList instance);
    partial void DeleteMMUserList(MMUserList instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersList(UsersList instance);
    partial void UpdateUsersList(UsersList instance);
    partial void DeleteUsersList(UsersList instance);
    #endregion
		
		public DatabaseContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contest> Contests
		{
			get
			{
				return this.GetTable<Contest>();
			}
		}
		
		public System.Data.Linq.Table<ControlPoint> ControlPoints
		{
			get
			{
				return this.GetTable<ControlPoint>();
			}
		}
		
		public System.Data.Linq.Table<MMControlPointContest> MMControlPointContests
		{
			get
			{
				return this.GetTable<MMControlPointContest>();
			}
		}
		
		public System.Data.Linq.Table<MMControlPointRoute> MMControlPointRoutes
		{
			get
			{
				return this.GetTable<MMControlPointRoute>();
			}
		}
		
		public System.Data.Linq.Table<MMUserContest> MMUserContests
		{
			get
			{
				return this.GetTable<MMUserContest>();
			}
		}
		
		public System.Data.Linq.Table<MMUserList> MMUserLists
		{
			get
			{
				return this.GetTable<MMUserList>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersList> UsersLists
		{
			get
			{
				return this.GetTable<UsersList>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Contest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _IsOpen;
		
		private string _Name;
		
		private string _Info;
		
		private System.DateTime _Date;
		
		private EntitySet<MMControlPointContest> _MMControlPointContests;
		
		private EntitySet<MMUserContest> _MMUserContests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIsOpenChanging(bool value);
    partial void OnIsOpenChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Contest()
		{
			this._MMControlPointContests = new EntitySet<MMControlPointContest>(new Action<MMControlPointContest>(this.attach_MMControlPointContests), new Action<MMControlPointContest>(this.detach_MMControlPointContests));
			this._MMUserContests = new EntitySet<MMUserContest>(new Action<MMUserContest>(this.attach_MMUserContests), new Action<MMUserContest>(this.detach_MMUserContests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOpen", DbType="Bit NOT NULL")]
		public bool IsOpen
		{
			get
			{
				return this._IsOpen;
			}
			set
			{
				if ((this._IsOpen != value))
				{
					this.OnIsOpenChanging(value);
					this.SendPropertyChanging();
					this._IsOpen = value;
					this.SendPropertyChanged("IsOpen");
					this.OnIsOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(1000)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contest_MMControlPoint", Storage="_MMControlPointContests", ThisKey="ID", OtherKey="IDContest", DeleteRule="NO ACTION")]
		public EntitySet<MMControlPointContest> MMControlPointContests
		{
			get
			{
				return this._MMControlPointContests;
			}
			set
			{
				this._MMControlPointContests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contest_MMUserContest", Storage="_MMUserContests", ThisKey="ID", OtherKey="IDContest", DeleteRule="NO ACTION")]
		public EntitySet<MMUserContest> MMUserContests
		{
			get
			{
				return this._MMUserContests;
			}
			set
			{
				this._MMUserContests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MMControlPointContests(MMControlPointContest entity)
		{
			this.SendPropertyChanging();
			entity.Contest = this;
		}
		
		private void detach_MMControlPointContests(MMControlPointContest entity)
		{
			this.SendPropertyChanging();
			entity.Contest = null;
		}
		
		private void attach_MMUserContests(MMUserContest entity)
		{
			this.SendPropertyChanging();
			entity.Contest = this;
		}
		
		private void detach_MMUserContests(MMUserContest entity)
		{
			this.SendPropertyChanging();
			entity.Contest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class ControlPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Text;
		
		private string _Name;
		
		private string _Info;
		
		private bool _IsActive;
		
		private EntitySet<MMControlPointContest> _MMControlPointContests;
		
		private EntitySet<MMControlPointRoute> _MMControlPointRoutes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public ControlPoint()
		{
			this._MMControlPointContests = new EntitySet<MMControlPointContest>(new Action<MMControlPointContest>(this.attach_MMControlPointContests), new Action<MMControlPointContest>(this.detach_MMControlPointContests));
			this._MMControlPointRoutes = new EntitySet<MMControlPointRoute>(new Action<MMControlPointRoute>(this.attach_MMControlPointRoutes), new Action<MMControlPointRoute>(this.detach_MMControlPointRoutes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(1000)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ControlPoint_MMControlPointContest", Storage="_MMControlPointContests", ThisKey="ID", OtherKey="IDControlPoint", DeleteRule="NO ACTION")]
		public EntitySet<MMControlPointContest> MMControlPointContests
		{
			get
			{
				return this._MMControlPointContests;
			}
			set
			{
				this._MMControlPointContests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ControlPoint_MMControlPointRoute", Storage="_MMControlPointRoutes", ThisKey="ID", OtherKey="IDControlPoint", DeleteRule="NO ACTION")]
		public EntitySet<MMControlPointRoute> MMControlPointRoutes
		{
			get
			{
				return this._MMControlPointRoutes;
			}
			set
			{
				this._MMControlPointRoutes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MMControlPointContests(MMControlPointContest entity)
		{
			this.SendPropertyChanging();
			entity.ControlPoint = this;
		}
		
		private void detach_MMControlPointContests(MMControlPointContest entity)
		{
			this.SendPropertyChanging();
			entity.ControlPoint = null;
		}
		
		private void attach_MMControlPointRoutes(MMControlPointRoute entity)
		{
			this.SendPropertyChanging();
			entity.ControlPoint = this;
		}
		
		private void detach_MMControlPointRoutes(MMControlPointRoute entity)
		{
			this.SendPropertyChanging();
			entity.ControlPoint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class MMControlPointContest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDControlPoint;
		
		private int _IDContest;
		
		private int _Order;
		
		private EntityRef<Contest> _Contest;
		
		private EntityRef<ControlPoint> _ControlPoint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDControlPointChanging(int value);
    partial void OnIDControlPointChanged();
    partial void OnIDContestChanging(int value);
    partial void OnIDContestChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public MMControlPointContest()
		{
			this._Contest = default(EntityRef<Contest>);
			this._ControlPoint = default(EntityRef<ControlPoint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDControlPoint", DbType="Int NOT NULL")]
		public int IDControlPoint
		{
			get
			{
				return this._IDControlPoint;
			}
			set
			{
				if ((this._IDControlPoint != value))
				{
					if (this._ControlPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDControlPointChanging(value);
					this.SendPropertyChanging();
					this._IDControlPoint = value;
					this.SendPropertyChanged("IDControlPoint");
					this.OnIDControlPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDContest", DbType="Int NOT NULL")]
		public int IDContest
		{
			get
			{
				return this._IDContest;
			}
			set
			{
				if ((this._IDContest != value))
				{
					if (this._Contest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDContestChanging(value);
					this.SendPropertyChanging();
					this._IDContest = value;
					this.SendPropertyChanged("IDContest");
					this.OnIDContestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contest_MMControlPoint", Storage="_Contest", ThisKey="IDContest", OtherKey="ID", IsForeignKey=true)]
		public Contest Contest
		{
			get
			{
				return this._Contest.Entity;
			}
			set
			{
				Contest previousValue = this._Contest.Entity;
				if (((previousValue != value) 
							|| (this._Contest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contest.Entity = null;
						previousValue.MMControlPointContests.Remove(this);
					}
					this._Contest.Entity = value;
					if ((value != null))
					{
						value.MMControlPointContests.Add(this);
						this._IDContest = value.ID;
					}
					else
					{
						this._IDContest = default(int);
					}
					this.SendPropertyChanged("Contest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ControlPoint_MMControlPointContest", Storage="_ControlPoint", ThisKey="IDControlPoint", OtherKey="ID", IsForeignKey=true)]
		public ControlPoint ControlPoint
		{
			get
			{
				return this._ControlPoint.Entity;
			}
			set
			{
				ControlPoint previousValue = this._ControlPoint.Entity;
				if (((previousValue != value) 
							|| (this._ControlPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ControlPoint.Entity = null;
						previousValue.MMControlPointContests.Remove(this);
					}
					this._ControlPoint.Entity = value;
					if ((value != null))
					{
						value.MMControlPointContests.Add(this);
						this._IDControlPoint = value.ID;
					}
					else
					{
						this._IDControlPoint = default(int);
					}
					this.SendPropertyChanged("ControlPoint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class MMControlPointRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDControlPoint;
		
		private int _IDRoute;
		
		private int _Order;
		
		private EntityRef<ControlPoint> _ControlPoint;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDControlPointChanging(int value);
    partial void OnIDControlPointChanged();
    partial void OnIDRouteChanging(int value);
    partial void OnIDRouteChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public MMControlPointRoute()
		{
			this._ControlPoint = default(EntityRef<ControlPoint>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDControlPoint", DbType="Int NOT NULL")]
		public int IDControlPoint
		{
			get
			{
				return this._IDControlPoint;
			}
			set
			{
				if ((this._IDControlPoint != value))
				{
					if (this._ControlPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDControlPointChanging(value);
					this.SendPropertyChanging();
					this._IDControlPoint = value;
					this.SendPropertyChanged("IDControlPoint");
					this.OnIDControlPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRoute", DbType="Int NOT NULL")]
		public int IDRoute
		{
			get
			{
				return this._IDRoute;
			}
			set
			{
				if ((this._IDRoute != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRouteChanging(value);
					this.SendPropertyChanging();
					this._IDRoute = value;
					this.SendPropertyChanged("IDRoute");
					this.OnIDRouteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ControlPoint_MMControlPointRoute", Storage="_ControlPoint", ThisKey="IDControlPoint", OtherKey="ID", IsForeignKey=true)]
		public ControlPoint ControlPoint
		{
			get
			{
				return this._ControlPoint.Entity;
			}
			set
			{
				ControlPoint previousValue = this._ControlPoint.Entity;
				if (((previousValue != value) 
							|| (this._ControlPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ControlPoint.Entity = null;
						previousValue.MMControlPointRoutes.Remove(this);
					}
					this._ControlPoint.Entity = value;
					if ((value != null))
					{
						value.MMControlPointRoutes.Add(this);
						this._IDControlPoint = value.ID;
					}
					else
					{
						this._IDControlPoint = default(int);
					}
					this.SendPropertyChanged("ControlPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Route_MMControlPointRoute", Storage="_Route", ThisKey="IDRoute", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.MMControlPointRoutes.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.MMControlPointRoutes.Add(this);
						this._IDRoute = value.ID;
					}
					else
					{
						this._IDRoute = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class MMUserContest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDUser;
		
		private int _IDContest;
		
		private System.Nullable<int> _Rank;
		
		private int _Identifier;
		
		private string _Time;
		
		private System.Nullable<int> _Status;
		
		private EntityRef<Contest> _Contest;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDUserChanging(int value);
    partial void OnIDUserChanged();
    partial void OnIDContestChanging(int value);
    partial void OnIDContestChanged();
    partial void OnRankChanging(System.Nullable<int> value);
    partial void OnRankChanged();
    partial void OnIdentifierChanging(int value);
    partial void OnIdentifierChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public MMUserContest()
		{
			this._Contest = default(EntityRef<Contest>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUser", DbType="Int NOT NULL")]
		public int IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDContest", DbType="Int NOT NULL")]
		public int IDContest
		{
			get
			{
				return this._IDContest;
			}
			set
			{
				if ((this._IDContest != value))
				{
					if (this._Contest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDContestChanging(value);
					this.SendPropertyChanging();
					this._IDContest = value;
					this.SendPropertyChanged("IDContest");
					this.OnIDContestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="Int")]
		public System.Nullable<int> Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="Int NOT NULL")]
		public int Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(100)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contest_MMUserContest", Storage="_Contest", ThisKey="IDContest", OtherKey="ID", IsForeignKey=true)]
		public Contest Contest
		{
			get
			{
				return this._Contest.Entity;
			}
			set
			{
				Contest previousValue = this._Contest.Entity;
				if (((previousValue != value) 
							|| (this._Contest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contest.Entity = null;
						previousValue.MMUserContests.Remove(this);
					}
					this._Contest.Entity = value;
					if ((value != null))
					{
						value.MMUserContests.Add(this);
						this._IDContest = value.ID;
					}
					else
					{
						this._IDContest = default(int);
					}
					this.SendPropertyChanged("Contest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_User_MMUserContest", Storage="_User", ThisKey="IDUser", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MMUserContests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MMUserContests.Add(this);
						this._IDUser = value.ID;
					}
					else
					{
						this._IDUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class MMUserList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDUser;
		
		private int _IDUsersList;
		
		private EntityRef<User> _User;
		
		private EntityRef<UsersList> _UsersList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDUserChanging(int value);
    partial void OnIDUserChanged();
    partial void OnIDUsersListChanging(int value);
    partial void OnIDUsersListChanged();
    #endregion
		
		public MMUserList()
		{
			this._User = default(EntityRef<User>);
			this._UsersList = default(EntityRef<UsersList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUser", DbType="Int NOT NULL")]
		public int IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUsersList", DbType="Int NOT NULL")]
		public int IDUsersList
		{
			get
			{
				return this._IDUsersList;
			}
			set
			{
				if ((this._IDUsersList != value))
				{
					if (this._UsersList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUsersListChanging(value);
					this.SendPropertyChanging();
					this._IDUsersList = value;
					this.SendPropertyChanged("IDUsersList");
					this.OnIDUsersListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_User_MMUserList", Storage="_User", ThisKey="IDUser", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MMUserLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MMUserLists.Add(this);
						this._IDUser = value.ID;
					}
					else
					{
						this._IDUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersList_MMUserList", Storage="_UsersList", ThisKey="IDUsersList", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public UsersList UsersList
		{
			get
			{
				return this._UsersList.Entity;
			}
			set
			{
				UsersList previousValue = this._UsersList.Entity;
				if (((previousValue != value) 
							|| (this._UsersList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersList.Entity = null;
						previousValue.MMUserLists.Remove(this);
					}
					this._UsersList.Entity = value;
					if ((value != null))
					{
						value.MMUserLists.Add(this);
						this._IDUsersList = value.ID;
					}
					else
					{
						this._IDUsersList = default(int);
					}
					this.SendPropertyChanged("UsersList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Info;
		
		private EntitySet<MMControlPointRoute> _MMControlPointRoutes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    #endregion
		
		public Route()
		{
			this._MMControlPointRoutes = new EntitySet<MMControlPointRoute>(new Action<MMControlPointRoute>(this.attach_MMControlPointRoutes), new Action<MMControlPointRoute>(this.detach_MMControlPointRoutes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(1000)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Route_MMControlPointRoute", Storage="_MMControlPointRoutes", ThisKey="ID", OtherKey="IDRoute", DeleteRule="CASCADE")]
		public EntitySet<MMControlPointRoute> MMControlPointRoutes
		{
			get
			{
				return this._MMControlPointRoutes;
			}
			set
			{
				this._MMControlPointRoutes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MMControlPointRoutes(MMControlPointRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_MMControlPointRoutes(MMControlPointRoute entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Info;
		
		private bool _IsActive;
		
		private EntitySet<MMUserContest> _MMUserContests;
		
		private EntitySet<MMUserList> _MMUserLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public User()
		{
			this._MMUserContests = new EntitySet<MMUserContest>(new Action<MMUserContest>(this.attach_MMUserContests), new Action<MMUserContest>(this.detach_MMUserContests));
			this._MMUserLists = new EntitySet<MMUserList>(new Action<MMUserList>(this.attach_MMUserLists), new Action<MMUserList>(this.detach_MMUserLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(1000)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_User_MMUserContest", Storage="_MMUserContests", ThisKey="ID", OtherKey="IDUser", DeleteRule="NO ACTION")]
		public EntitySet<MMUserContest> MMUserContests
		{
			get
			{
				return this._MMUserContests;
			}
			set
			{
				this._MMUserContests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_User_MMUserList", Storage="_MMUserLists", ThisKey="ID", OtherKey="IDUser", DeleteRule="NO ACTION")]
		public EntitySet<MMUserList> MMUserLists
		{
			get
			{
				return this._MMUserLists;
			}
			set
			{
				this._MMUserLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MMUserContests(MMUserContest entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MMUserContests(MMUserContest entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MMUserLists(MMUserList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MMUserLists(MMUserList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class UsersList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Info;
		
		private EntitySet<MMUserList> _MMUserLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    #endregion
		
		public UsersList()
		{
			this._MMUserLists = new EntitySet<MMUserList>(new Action<MMUserList>(this.attach_MMUserLists), new Action<MMUserList>(this.detach_MMUserLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(1000)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersList_MMUserList", Storage="_MMUserLists", ThisKey="ID", OtherKey="IDUsersList", DeleteRule="CASCADE")]
		public EntitySet<MMUserList> MMUserLists
		{
			get
			{
				return this._MMUserLists;
			}
			set
			{
				this._MMUserLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MMUserLists(MMUserList entity)
		{
			this.SendPropertyChanging();
			entity.UsersList = this;
		}
		
		private void detach_MMUserLists(MMUserList entity)
		{
			this.SendPropertyChanging();
			entity.UsersList = null;
		}
	}
}
#pragma warning restore 1591
